###############################################################################
# Following settings are from:
# http://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project/Recommended_Settings

# Try to keep kernel address exposures out of various /proc files
# (kallsyms, modules, etc).
kernel.kptr_restrict=2

# Avoid kernel memory address exposures via dmesg
# (this value can also be set by CONFIG_SECURITY_DMESG_RESTRICT).
kernel.dmesg_restrict=1

# Block non-uid-0 profiling (needs distro patch, otherwise this is the
# same as "= 2")
# Distro patch:
# https://patchwork.kernel.org/project/kernel-hardening/patch/1469630746-32279-1-git-send-email-jeffv@google.com/
kernel.perf_event_paranoid=3

# Turn off kexec, even if it's built in.
kernel.kexec_load_disabled=1

# Avoid non-ancestor ptrace access to running processes and their credentials.
# This restricts usage of ptrace to only processes with the CAP_SYS_PTRACE capability.
kernel.yama.ptrace_scope=2

# Disable User Namespaces, as it opens up a large attack surface to
# unprivileged users.
user.max_user_namespaces=0

# Turn off unprivileged eBPF access.
kernel.unprivileged_bpf_disabled=1

# Turn on BPF JIT hardening, if the JIT is enabled.
net.core.bpf_jit_harden=2


###############################################################################
# Following settings are from:
# https://docs.clip-os.org/clipos/kernel.html#sysctl-security-tuning
# The configurations which are duplicated compared to the above ones,
# are not set here anymore.

# Do not automatically load any line discipline that is in a kernel module
# when an unprivileged user asks for it.
dev.tty.ldisc_autoload=0

# The following configuration is already enabled if the kernel configuration
# CONFIG_SECURITY_TIOCSTI_RESTRICT is enabled.
kernel.tiocsti_restrict=1


# The following two sysctls help mitigating TOCTOU vulnerabilities by preventing
# users from creating symbolic or hard links to files they do not own or have
# read/write access to.
fs.protected_symlinks=1
fs.protected_hardlinks=1
# The following two sysctls impose restrictions on the opening of FIFOs and
# regular files in order to make similar spoofing attacks harder. These
# restrictions do not on all filsystems, for example networked filesystems.
fs.protected_fifos=2
fs.protected_regular=2

# TODO: check if the following parameter can be used in FOG drone environment.
#kernel.deny_new_usb=0

# Restrict device timing side channels.
kernel.device_sidechannel_restrict=1

# Do not create core dumps of setuid executables. Already disabled if
# CONFIG_COREDUMP=n has been set to 0.
fs.suid_dumpable=0

# Increase the space for PID values.
kernel.pid_max=4194304

# Disable the load of kernel modules after systemd has finished loading
# the ones needed in the running device.
kernel.modules_disabled=1


###############################################################################
# Following settings are from:
# https://madaidans-insecurities.github.io/guides/linux-hardening.html#sysctl-kernel
# The configurations which are duplicated compared to the above ones,
# are not set here anymore.

# Reduce the amount of information printed by the kernel in dmesg log.
# It must be used in combination wit the following kernel boot parameters:
# quiet loglevel=0
kernel.printk=3 3 3 3

# The userfaultfd() syscall is often abused to exploit use-after-free flaws.
vm.unprivileged_userfaultfd=0

# The SysRq key exposes a lot of potentially dangerous debugging functionality
# to unprivileged users. Alternatively, it can be set the value to 0 to disable
# SysRq completely.
kernel.sysrq=4

# Following setting requires a patch. 
# If the kernel does not have this setting then user namespaces can be
# completely disabled with the setting: user.max_user_namespaces=0.
kernel.unprivileged_userns_clone=0

# Network settings.

# This protects against SYN flood attacks.
net.ipv4.tcp_syncookies=1

# This protects against time-wait assassination by dropping RST packets for
# sockets in the time-wait state.
net.ipv4.tcp_rfc1337=1


# Protects against IP spoofing.
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1

# The following settings disable ICMP recirect acceptance and sending which
# will prevent man-in-the-middle attacks.
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0

# Avoid Smurff attacks by making the device more difficutl to enumerate
# in the network.
net.ipv4.icmp_echo_ignore_all=1

# Avoid source routing withe following settings. Also used to prevent
# man-in-the-middle attacks.
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0

# Avoid man-in-the-middle attacks.
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.accept_ra=0

# Disable SACK if it is not needed because it can be exploited and
# many times can be disabled.
net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
net.ipv4.tcp_fack=0


# The following settings increase the bits of entropy used for mmap
# ASLR, which increases the randomisation of the position of critical
# parts of a process. 
# It is CPU dependent.
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16
